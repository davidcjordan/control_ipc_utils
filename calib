#!/usr/bin/env python3

"""
Does the following:
 - gets or puts camera calibration data to cam 0 or 1 based on argument parsing

 returns 0 on pass; 1 on failure
"""
from ctrl_messaging_routines import send_msg
from control_ipc_defines import GET_METHOD, PUT_METHOD, STRT_RSRC, LCAM_RSRC, RCAM_RSRC

import argparse
import logging
import sys

if __name__ == '__main__':

   num_args = len(sys.argv)
   # print("sys.argv len: {}  args: {}".format(num_args, sys.argv))

   do_positional_args = False
   method = PUT_METHOD
   if (num_args < 3):
      # print('would do get')
      method = GET_METHOD
   elif sys.argv[1].startswith('-'):
      # print('would do named - 2nd arg starts with -')
      pass
   elif (num_args > 2) and (sys.argv[2].startswith('-')):
      # print('would do named - 3rd arg start with -')
      pass
   else:
      do_positional_args = True

   calib_full_names = {
      'a' : 'NEAR_BASE_LEFT', \
      'c' : 'NEAR_BASE_RIGHT', \
      'e' : 'NEAR_SERVICE_LEFT', \
      'g' : 'NEAR_SERVICE_CENTER', \
      'i' : 'NEAR_SERVICE_RIGHT', \
      'k' : 'FAR_BASE_LEFT', \
      'm' : 'FAR_BASE_RIGHT', \
      'o' : 'NET_LEFT', \
      'q' : 'NET_CENTER', \
      's' : 'NET_RIGHT', \
      'u' : 'FAR_SERVICE_LEFT', \
      'w' : 'FAR_SERVICE_CENTER', \
      'y' : 'FAR_SERVICE_RIGHT' }
   calib_switch_names = {
      'a' : 'nbl', \
      'c' : 'nbr', \
      'e' : 'nsl', \
      'g' : 'nsc', \
      'i' : 'nsr', \
      'k' : 'fbl', \
      'm' : 'fbr', \
      'o' : 'nl', \
      'q' : 'nc', \
      's' : 'nr', \
      'u' : 'fsl', \
      'w' : 'fsc', \
      'y' : 'fsr' }

   parser = argparse.ArgumentParser(description='Get-Put calibration points for cameras')
   if method == GET_METHOD:
      parser.add_argument('cam',type=int, default=0, nargs='?', help='camera number: 0 or 1')
   elif do_positional_args:
      parser.add_argument('cam',type=int, default=0, help='camera number: 0 or 1')
      for key, value in calib_switch_names.items():
         if key < 'u':
            # the first 10 calib points are required
            parser.add_argument(key,type=float, help=calib_full_names[key] + ' x')
            y_key = chr(ord(key)+1)
            parser.add_argument(y_key,type=float, help=calib_full_names[key] + ' y')
         else:
            # the last 3 calib points are optional
            parser.add_argument(key,type=float, help=calib_full_names[key] + ' x', nargs='?')
            y_key = chr(ord(key)+1)
            parser.add_argument(y_key,type=float, help=calib_full_names[key] + ' y', nargs='?')
   else:
      parser.add_argument('cam',type=int, default=0, help='camera number: 0 or 1', nargs='?')
      for key, value in calib_switch_names.items():
         base_switch = '--' + value
         parser.add_argument(base_switch + "x",dest=key,type=float, help=calib_full_names[key] + ' x', nargs='?')
         y_key = chr(ord(key)+1)
         parser.add_argument(base_switch + "y",dest=y_key,type=float, help=calib_full_names[key] + ' y', nargs='?')

   args = parser.parse_args()
   if args.cam == 0:
      cam_id = LCAM_RSRC
   else:
      cam_id = RCAM_RSRC

   #  construct calibration points from named or positional arguments
   points_set = "Set: "
   calib_data = {}
   if method == PUT_METHOD:
      if do_positional_args:
         for arg in vars(args):
            if arg is 'cam':
               continue
            else:
               calib_data[arg] = getattr(args, arg)
      else:
            for arg in vars(args):
               if arg is 'cam':
                  continue
               else:
                  if getattr(args, arg) is not None:
                     calib_data[arg] = getattr(args, arg)
                     arg_index = ord(arg) - ord('a') + 2
                     points_set += parser._actions[arg_index].help + ", "

   if method == GET_METHOD:
      rc, msg = send_msg(method, cam_id)
      if not rc:
         logging.error("Get calibration points failed, code: {}".format(msg))
         sys.exit(1)
      else:
         # print("Calib Points: {}".format(msg))
         for key, value in msg.items():
            index = ord(key) - ord('a')
            if (index % 2) == 0:
               prev_key = key
               prev_value = value
               point_name = calib_full_names[key]
            else:
               # print("{}-{} {} X: {} Y: {}".format(prev_key, key, point_name, prev_value, value))
               print("{:>20}  X:{:6.1f}   Y:{:6.1f}".format(point_name, prev_value, value))
   else:
      rc, code = send_msg(method, cam_id, calib_data)
      if not rc:
         logging.error("PUT Mode failed, code: {}".format(code))
         sys.exit(1)
      if len(points_set) > 8:
         print(points_set[:-2])  # dont print the trailing ". "
