#!/usr/bin/env python3

"""
Does the following:
 - gets or puts camera calibration data to cam 0 or 1 based on argument parsing

 returns 0 on pass; 1 on failure
"""
from ctrl_messaging_routines import send_msg
from control_ipc_defines import GET_METHOD, PUT_METHOD, STRT_RSRC, LCAM_RSRC, RCAM_RSRC

import argparse
import logging
import sys

if __name__ == '__main__':

   num_args = len(sys.argv)
   # print("sys.argv len: {}  args: {}".format(num_args, sys.argv))

   do_positional_args = False
   method = PUT_METHOD
   if (num_args < 3):
      # print('would do get')
      method = GET_METHOD
   elif sys.argv[1].startswith('-'):
      # print('would do named - 2nd arg starts with -')
      pass
   elif (num_args > 2) and (sys.argv[2].startswith('-')):
      # print('would do named - 3rd arg start with -')
      pass
   else:
      do_positional_args = True

   # sys.exit(1)

   parser = argparse.ArgumentParser(description='Get-Put calibration points for cameras')
   if method == GET_METHOD:
      parser.add_argument('cam',type=int, default=0, nargs='?', help='camera number: 0 or 1')
   elif do_positional_args:
      parser.add_argument('cam',type=int, default=0, help='camera number: 0 or 1')

      parser.add_argument('a',type=float, help='NEAR_BASE_LEFT x')
      parser.add_argument('b',type=float, help='NEAR_BASE_LEFT y')
      parser.add_argument('c',type=float, help='NEAR_BASE_RIGHT x')
      parser.add_argument('d',type=float, help='NEAR_BASE_RIGHT y')

      parser.add_argument('e',type=float, help='NEAR_SERVICE_LEFT x')
      parser.add_argument('f',type=float, help='NEAR_SERVICE_LEFT y')
      parser.add_argument('g',type=float, help='NEAR_SERVICE_CENTER x')
      parser.add_argument('h',type=float, help='NEAR_SERVICE_CENTER y')
      parser.add_argument('i',type=float, help='NEAR_SERVICE_RIGHT x')
      parser.add_argument('j',type=float, help='NEAR_SERVICE_RIGHT y')

      parser.add_argument('k',type=float, help='FAR_BASE_LEFT x')
      parser.add_argument('l',type=float, help='FAR_BASE_LEFT y')
      parser.add_argument('m',type=float, help='FAR_BASE_RIGHT x')
      parser.add_argument('n',type=float, help='FAR_BASE_RIGHT y')

      parser.add_argument('o',type=float, help='NET_LEFT x')
      parser.add_argument('p',type=float, help='NET_LEFT y')
      parser.add_argument('q',type=float, help='NET_CENTER x')
      parser.add_argument('r',type=float, help='NET_CENTER y')
      parser.add_argument('s',type=float, help='NET_RIGHT x')
      parser.add_argument('t',type=float, help='NET_RIGHT y')
   
      parser.add_argument('u',type=float, help='FAR_SERVICE_LEFT x', nargs='?')
      parser.add_argument('v',type=float, help='FAR_SERVICE_LEFT y', nargs='?')
      parser.add_argument('w',type=float, help='FAR_SERVICE_CENTER x', nargs='?')
      parser.add_argument('x',type=float, help='FAR_SERVICE_CENTER y', nargs='?')
      parser.add_argument('y',type=float, help='FAR_SERVICE_RIGHT x', nargs='?')
      parser.add_argument('z',type=float, help='FAR_SERVICE_RIGHT y', nargs='?')
   else:
      parser.add_argument('cam',type=int, default=0, help='camera number: 0 or 1', nargs='?')

      parser.add_argument('--nblx',dest='a',type=float, help='NEAR_BASE_LEFT x', nargs='?')
      parser.add_argument('--nbly',dest='b',type=float, help='NEAR_BASE_LEFT y', nargs='?')
      parser.add_argument('--nbrx',dest='c',type=float, help='NEAR_BASE_RIGHT x', nargs='?')
      parser.add_argument('--nbry',dest='d',type=float, help='NEAR_BASE_RIGHT y', nargs='?')

      parser.add_argument('--nslx',dest='e',type=float, help='NEAR_SERVICE_LEFT x', nargs='?')
      parser.add_argument('--nsly',dest='f',type=float, help='NEAR_SERVICE_LEFT y', nargs='?')
      parser.add_argument('--nscx',dest='g',type=float, help='NEAR_SERVICE_CENTER x', nargs='?')
      parser.add_argument('--nscy',dest='h',type=float, help='NEAR_SERVICE_CENTER y', nargs='?')
      parser.add_argument('--nsrx',dest='i',type=float, help='NEAR_SERVICE_RIGHT x', nargs='?')
      parser.add_argument('--nsry',dest='j',type=float, help='NEAR_SERVICE_RIGHT y', nargs='?')

      parser.add_argument('--fblx',dest='k',type=float, help='FAR_BASE_LEFT x', nargs='?')
      parser.add_argument('--fbly',dest='l',type=float, help='FAR_BASE_LEFT y', nargs='?')
      parser.add_argument('--fbrx',dest='m',type=float, help='FAR_BASE_RIGHT x', nargs='?')
      parser.add_argument('--fbry',dest='n',type=float, help='FAR_BASE_RIGHT y', nargs='?')

      parser.add_argument('--nlx',dest='o',type=float, help='NET_LEFT x', nargs='?')
      parser.add_argument('--nly',dest='p',type=float, help='NET_LEFT y', nargs='?')
      parser.add_argument('--ncx',dest='q',type=float, help='NET_CENTER x', nargs='?')
      parser.add_argument('--ncy',dest='r',type=float, help='NET_CENTER y', nargs='?')
      parser.add_argument('--nrx',dest='s',type=float, help='NET_RIGHT x', nargs='?')
      parser.add_argument('--nry',dest='t',type=float, help='NET_RIGHT y', nargs='?')

      parser.add_argument('--fslx',dest='u',type=float, help='FAR_SERVICE_LEFT x', nargs='?')
      parser.add_argument('--fsly',dest='v',type=float, help='FAR_SERVICE_LEFT y', nargs='?')
      parser.add_argument('--fscx',dest='w',type=float, help='FAR_SERVICE_CENTER x', nargs='?')
      parser.add_argument('--fscy',dest='x',type=float, help='FAR_SERVICE_CENTER y', nargs='?')
      parser.add_argument('--fsrx',dest='y',type=float, help='FAR_SERVICE_RIGHT x', nargs='?')
      parser.add_argument('--fsry',dest='z',type=float, help='FAR_SERVICE_RIGHT y', nargs='?')

   args = parser.parse_args()
   if args.cam == 0:
      cam_id = LCAM_RSRC
   else:
      cam_id = RCAM_RSRC

   #  construct calibration points from named or positional arguments
   points_set = "Set: "
   calib_data = {}
   if method == PUT_METHOD:
      if do_positional_args:
         for arg in vars(args):
            if arg is 'cam':
               continue
            else:
               calib_data[arg] = getattr(args, arg)
      else:
            for arg in vars(args):
               if arg is 'cam':
                  continue
               else:
                  if getattr(args, arg) is not None:
                     calib_data[arg] = getattr(args, arg)
                     arg_index = ord(arg) - ord('a') + 2
                     points_set += parser._actions[arg_index].help + ", "

   if method == GET_METHOD:
      rc, msg = send_msg(method, cam_id)
      if not rc:
         logging.error("Get calibration points failed, code: {}".format(msg))
         sys.exit(1)
      else:
         print("Calib Points: {}".format(msg))
   else:
      rc, code = send_msg(method, cam_id, calib_data)
      if not rc:
         logging.error("PUT Mode failed, code: {}".format(code))
         sys.exit(1)
      if len(points_set) > 8:
         print(points_set[:-2])  # dont print the trailing ". "
