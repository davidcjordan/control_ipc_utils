#!/usr/bin/env python3

"""
Does the following:
 - configures mode and parameters (level, speed, etc)
 - sends the start message: NOTE: the drill starts in the pause state and is started with the remote
 - checks for Active

 returns 0 on pass; 1 on failure
"""
import logging
log_format = ('[%(asctime)s] %(levelname)-6s %(message)s')
logging.basicConfig(format=log_format, level=logging.INFO)
# logging.basicConfig(format=log_format, level=logging.DEBUG)

if __name__ == '__main__':
   from ctrl_messaging_routines import send_msg, is_state
   from control_ipc_defines import PUT_METHOD, STRT_RSRC, MODE_RSRC, BCFG_RSRC, DCFG_RSRC, \
      MODE_PARAM, ID_PARAM, STEP_PARAM, base_mode_e, base_state_e,\
      LEVEL_PARAM, SPEED_MOD_PARAM, DELAY_MOD_PARAM, ELEVATION_MOD_PARAM, \
      LEVEL_MIN, LEVEL_MAX, LEVEL_DEFAULT, \
      DELAY_MOD_MIN, DELAY_MOD_MAX, DELAY_MOD_DEFAULT, \
      SPEED_MOD_MIN, SPEED_MOD_MAX, SPEED_MOD_DEFAULT, \
      ELEVATION_ANGLE_MOD_MIN, ELEVATION_ANGLE_MOD_MAX, ELEVATION_ANGLE_MOD_DEFAULT
   import sys

   shell_rc = 1

   import argparse
   parser = argparse.ArgumentParser(description='Start boomer')
   parser.add_argument('-l', '--level', dest='level_setting', \
         type=int, default=LEVEL_DEFAULT, nargs='?', \
         help='player skill level; range 10 to 70')
         # choices=range(LEVEL_MIN, LEVEL_MAX+1), <- removed because it enumerated the range
   parser.add_argument('-s', '--speed', dest='speed_setting', \
         type=int, default=SPEED_MOD_DEFAULT, nargs='?', \
         help='percent to increase/decrease ball speed: 80 to 100')
         # choices=range(SPEED_MOD_MIN, SPEED_MOD_MAX+1),
   parser.add_argument('-H', '--height', dest='height_setting', \
         type=int, default=ELEVATION_ANGLE_MOD_DEFAULT, nargs='?', \
         help='number of 1/2 degrees to change height of the ball throw; range -32 to 32')
         #choices=range(HEIGHT_MOD_MIN, HEIGHT_MOD_MAX+1),
   parser.add_argument('-d', '--delay', dest='delay_setting', \
         type=int, default=DELAY_MOD_DEFAULT, nargs='?', \
         help='milliseoncds of delay the next ball; range -2000 to 2000')
         # choices=range(DELAY_MOD_MIN, DELAY_MOD_MAX+1), 
   parser.add_argument('-i', '--drill_id', dest='drill_id_setting', \
         type=int,  default=0, nargs='?', \
         help='drill number; range 0-999')
         # choices=range(0, 1000),
   args = parser.parse_args()
   # print("called with {}: ".format(sys.argv[0]))
   # print("mode: {}  level: {}  doubles: {}  tiebreaker: {}".format(args.mode_setting,\
   #     args.level_setting, args.doubles_setting, args.tiebreaker_setting))

   if args.speed_setting < SPEED_MOD_MIN or args.speed_setting > SPEED_MOD_MAX:
      print("speed not between {} and {}".format(SPEED_MOD_MIN, SPEED_MOD_MAX))
      sys.exit(shell_rc)
   if args.height_setting < ELEVATION_ANGLE_MOD_MIN or args.height_setting > ELEVATION_ANGLE_MOD_MAX:
      print("height not between {} and {}".format(HEIGHT_MOD_MIN, HEIGHT_MOD_MAX))
      sys.exit(shell_rc)
   if args.delay_setting < DELAY_MOD_MIN or args.delay_setting > DELAY_MOD_MAX:
      print("delay not between {} and {}".format(DELAY_MOD_MIN, DELAY_MOD_MAX))
      sys.exit(shell_rc)
   if args.drill_id_setting < 0 or args.drill_id_setting > 999:
      print("drill_id not between 0 and 999")
      sys.exit(shell_rc)
   if args.level_setting < LEVEL_MIN or args.level_setting > LEVEL_MAX:
      print("level not between {} and {}".format(LEVEL_MIN, LEVEL_MAX))
      sys.exit(shell_rc)

   idle, state = is_state(state=base_state_e.IDLE.value)
   if (type(idle) is not bool):
      logging.error("GET Status failed")
      sys.exit(shell_rc)
   if not idle:
      logging.error(f"Base is not IDLE; state is '{state}'")
      sys.exit(shell_rc)

   mode = {MODE_PARAM: base_mode_e.DRILL.value, \
      ID_PARAM: args.drill_id_setting}
   rc, code = send_msg(PUT_METHOD, MODE_RSRC, mode)
   if not rc:
      logging.error("PUT Mode failed, code: {}".format(code))
      sys.exit(shell_rc)

   # TODO: add grunts and trash talking
   base_cfg_options = {LEVEL_PARAM: args.level_setting}
   rc, code = send_msg(PUT_METHOD, BCFG_RSRC, base_cfg_options)
   if not rc:
      logging.error("PUT Base Confg failed, code: {}".format(code))
      sys.exit(shell_rc)


   drill_cfg_mods = {SPEED_MOD_PARAM: args.speed_setting, \
         ELEVATION_MOD_PARAM: args.height_setting, \
         DELAY_MOD_PARAM: args.delay_setting}
   rc, code = send_msg(PUT_METHOD, DCFG_RSRC, drill_cfg_mods)
   if not rc:
      logging.error("PUT Drill Config failed, code: {}".format(code))
      sys.exit(shell_rc)

   # start and check for active
   rc, code = send_msg(PUT_METHOD, STRT_RSRC)
   if not rc:
      logging.error("PUT START failed, code: {}".format(code))
      sys.exit(shell_rc)
   paused, state = is_state(state=base_mode_e.PAUSED.value)
   if (type(paused) is not bool):
      logging.error("GET Status failed")
      sys.exit(shell_rc)
   if not paused:
      logging.error(f"Base didn't go pause after start drill; state is '{state}'")
      sys.exit(shell_rc)
   else:
      logging.info("Drill {} started; level={}, speed={}, height={}, delay={}".format(\
         args.drill_id_setting, args.level_setting, args.speed_setting, args.height_setting, args.delay_setting))